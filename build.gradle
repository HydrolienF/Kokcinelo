buildscript {


    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
        google()
    }
    dependencies {
        classpath 'org.wisepersist:gwt-gradle-plugin:1.1.16'
        classpath 'org.gretty:gretty:3.0.7'
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.16'
        classpath 'com.diffplug.spotless:spotless-lib:2.35.0'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.15.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.0.0.2929"
    }
}

task writeAllAssetsToFile {
    doLast {
        // projectfolder/assets
        def assetsFolder = new File("${project.rootDir}/assets/")
        // projectfolder/assets/assets.txt
        def assetsFile = new File(assetsFolder, "assets.txt")
        // delete that file in case we've already created it
        assetsFile.delete()

        // iterate through all files inside that folder
        // convert it to a relative path
        // and append it to assets.txt the file
        fileTree(assetsFolder).collect {assetsFolder.relativePath(it) }.each {
            assetsFile.append(it + "\n")
        }
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "com.diffplug.spotless"

    ext {
        appName = "Kokcinelo"
        gdxVersion = '1.11.0'
        roboVMVersion = '2.3.16'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.4'
        aiVersion = '1.8.2'
        gdxControllersVersion = '2.2.1'
        log4jVersion = '2.19.0'
        junitVersion = '5.9.1'
        usualVersion = '0.2.117'
        shapedrawerVersion = '2.5.0'
        spineVersion = '4.1.0'
        // spotlessLibVersion = '2.35.0'
        // spotlessVersion = '6.15.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
    }

    spotless {
        java {
            target fileTree('.') {
                include '**/*.java'
                exclude '**/build/**', '**/build-*/**'
            }
            toggleOffOn()
            // palantirJavaFormat()
            // removeUnusedImports()
            // trimTrailingWhitespace()
            // endWithNewline()
            removeUnusedImports()
            eclipse('4.10.0').configFile new File(rootProject.projectDir.absolutePath, 'eclipse-formatter.xml')
        }
    }
}

project(":desktop") {
    apply plugin: "java-library"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }
}

// project(":android") {
//     apply plugin: "com.android.application"

//     configurations { natives }

//     dependencies {
//         implementation project(":core")
//         api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
//         natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
//         natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
//         natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
//         natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
//         implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
//         natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
//         natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
//         natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
//         natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"

//     }
// }

// project(":ios") {
//     apply plugin: "java-library"
//     apply plugin: "robovm"


//     dependencies {
//         implementation project(":core")
//         api "com.mobidevelop.robovm:robovm-rt:$roboVMVersion"
//         api "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion"
//         api "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
//         api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
//         implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
//     }
// }

// project(":html") {
//     apply plugin: "java-library"
//     apply plugin: "gwt"
//     apply plugin: "war"
//     apply plugin: "org.gretty"


//     dependencies {
//         implementation project(":core")
//         api "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
//         api "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
//         api "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"

//         // Isn't enoth, maybe because it start with 
//         api "com.github.HydrolienF:usual:$usualVersion"
//     }
// }

project(":core") {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "jacoco"
    apply plugin: "org.sonarqube"
    compileJava.dependsOn writeAllAssetsToFile

    dependencies {
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.github.HydrolienF:usual:$usualVersion"
        testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
        implementation 'org.yaml:snakeyaml:1.21'
        implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        implementation "space.earlygrey:shapedrawer:$shapedrawerVersion"
        implementation "com.esotericsoftware.spine:spine-libgdx:$spineVersion"
        implementation "com.badlogicgames.gdx:gdx-ai:$aiVersion"
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
            //cf https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLogging.html
            // maxGranularity 3
            // minGranularity 2
            showStackTraces true
            exceptionFormat "full"
        }

        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    jacoco {
        toolVersion = "0.8.8"
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.enabled true
            csv.enabled false
            html.enabled true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    sonar {
        properties {
            property "sonar.projectName", "$appName"
            property "sonar.host.url", "http://localhost:9000"
            property "sonar.login", "admin"
            property "sonar.password", "mdp"
        }
    }

    tasks.named('sonar').configure {
        dependsOn test
    }
}

// dependencies {
//     // implementation("com.diffplug.spotless:spotless-lib:$spotlessLibVersion")
//     // implementation("com.diffplug.spotless:spotless-plugin-gradle:$spotlessVersion")
//     // spotlessLibVersion = '2.35.0'
//     //     spotlessVersion = '6.15.0'
//     implementation "com.diffplug.spotless:spotless-lib:2.35.0"
//     implementation "com.diffplug.spotless:spotless-plugin-gradle:6.15.0"
// }